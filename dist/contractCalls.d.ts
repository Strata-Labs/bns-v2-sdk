import { ContractCallPayload } from "./interfaces";
import * as Types from "./interfaces";
export declare function buildTransferNameTx({ fullyQualifiedName, newOwnerAddress, senderAddress, network, }: Types.TransferNameOptions): Promise<ContractCallPayload>;
export declare function buildListInUstxTx({ id, price, commissionTraitAddress, commissionTraitName, senderAddress, network, }: Types.ListInUstxOptions): Promise<ContractCallPayload>;
export declare function buildUnlistInUstxTx({ id, senderAddress, network, }: Types.UnlistInUstxOptions): Promise<ContractCallPayload>;
export declare function buildBuyInUstxTx({ id, expectedPrice, commissionTraitAddress, commissionTraitName, senderAddress, network, }: Types.BuyInUstxOptions): Promise<ContractCallPayload>;
export declare function buildSetPrimaryNameTx({ fullyQualifiedName, senderAddress, network, }: Types.SetPrimaryNameOptions): Promise<ContractCallPayload>;
export declare function buildFreezeManagerTx({ namespace, senderAddress, network, }: Types.FreezeManagerOptions): Promise<ContractCallPayload>;
export declare function buildPreorderNamespaceTx({ namespace, salt, stxToBurn, senderAddress, network, }: Types.PreorderNamespaceOptions): Promise<ContractCallPayload>;
export declare function buildRevealNamespaceTx({ namespace, salt, priceFunction, lifetime, namespaceImportAddress, namespaceManagerAddress, canUpdatePrice, managerTransfer, managerFrozen, senderAddress, network, }: Types.RevealNamespaceOptions): Promise<ContractCallPayload>;
export declare function buildLaunchNamespaceTx({ namespace, senderAddress, network, }: Types.LaunchNamespaceOptions): Promise<ContractCallPayload>;
export declare function buildTurnOffManagerTransfersTx({ namespace, senderAddress, network, }: Types.TurnOffManagerTransfersOptions): Promise<ContractCallPayload>;
export declare function buildImportNameTx({ namespace, name, beneficiary, senderAddress, network, }: Types.ImportNameOptions): Promise<ContractCallPayload>;
export declare function buildNamespaceUpdatePriceTx({ namespace, priceFunction, senderAddress, network, }: Types.NamespaceUpdatePriceOptions): Promise<ContractCallPayload>;
export declare function buildNamespaceFreezePriceTx({ namespace, senderAddress, network, }: Types.NamespaceFreezePriceOptions): Promise<ContractCallPayload>;
export declare function buildNameClaimFastTx({ fullyQualifiedName, stxToBurn, sendTo, senderAddress, network, }: Types.NameFastClaimOptions): Promise<ContractCallPayload>;
export declare function buildPreorderNameTx({ fullyQualifiedName, salt, stxToBurn, senderAddress, network, }: Types.PreorderNameOptions): Promise<ContractCallPayload>;
export declare function buildRegisterNameTx({ fullyQualifiedName, salt, stxToBurn, senderAddress, network, }: Types.RegisterNameOptions): Promise<ContractCallPayload>;
export declare function buildPreviousRegisterNameTx({ fullyQualifiedName, salt, stxToBurn, senderAddress, network, }: Types.RegisterNameOptions): Promise<ContractCallPayload>;
export declare function buildClaimPreorderTx({ fullyQualifiedName, salt, stxToClaim, senderAddress, network, }: Types.ClaimPreorderOptions): Promise<ContractCallPayload>;
export declare function buildRenewNameTx({ fullyQualifiedName, stxToBurn, senderAddress, network, }: Types.RenewNameOptions): Promise<ContractCallPayload>;
export declare function buildUpdateZonefileTx({ fullyQualifiedName, zonefileInputs, senderAddress, network, }: Types.UpdateZonefileOptions): Promise<ContractCallPayload>;
